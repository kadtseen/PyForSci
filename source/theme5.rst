.. _theme5:

=========================================
Работа с файлами, модуль ``os`` 
=========================================

`Лекция в .ipynb формате <../../source/lectures/theme5.ipynb>`_

Работа с файлами. Открытие файла, режимы доступа.  Простое чтение/запись в файл. Конструкции with .. as и try .. except. Методы numpy.loadtxt, numpy.savetxt. Модуль os. Пример работы с файловой системой, использования модуля os.path.
 
Работа с файлами
========================

Файловая система
----------------------------
Абсолютный путь - путь, по которому можно найти файл, влючающий название устройства/домена/или корневого каталога.
Пример: 

``C:\Users\admin\Documents\file.txt``  (windows)

``https://yamarus.github.io/PyForSci/source/lectures/theme5.ipynb`` (web)

``/home/ruslan/Documents/work/PyForSci/source/lectures/theme5.ipynb`` (unix)

Относительный путь - указание пути относительно данного файла/кактлога

Рассмотрим некоторую систему вложенных папок и файлов, относительно файла `theme5.rst`:

.. image:: figs/path.svg

Стандартные методы Python
----------------------------------

Для работы с файлами Python имеет стандартную функцию ``open``.
`Документация на оффициальном сайте <https://docs.python.org/3/library/functions.html#open>`_ описывает ее следующим образом:

.. code:: python

     open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)

Для обычной работы с текстовыми файлами наиболее важными аргументами
являются

``file`` - строка (точнее `path-like object <https://docs.python.org/3/glossary.html#term-path-like-object>`_) имя относительного или
полного пути к файлу.

``mode`` - режим работы с файлом (можно комбинировать нижестоящие)

``r`` - режим чтения

``w`` - режим записи (удаляет все содержимое файла)

``a`` - открывает для добавления (курсор в конце файла)

``+`` - открывает для обновления (курсор в начале файла)

``b`` - открывает в бинарном виде

Данная функция возвращает объект файла который имеет следующие важные
методы (пример для ``f = open('filename', 'r+')``:

-  ``f.read()`` - читает файл. В качестве аргумента можно указать
   количество читаемых символов

-  ``f.readline()`` - читает текущую строку

-  ``f.readlines()`` - читает все строки в файле, возвращает список
   строк (``list(f)`` дает тот же эффект)

-  ``f.write(string)`` - записывает содержимое ``string`` в файл

-  ``f.writelines(list_of_string)`` - записывает список строк
   ``list_of_string`` в файл

-  ``f.tell()`` - возвращает текущую позицию курсора в файле

-  ``f.seek(offset, whence)`` - перемещает курсор на ``offset`` позицию
   относительно точки отсчета ``whence``. ``whence=0`` - начало фала,
   ``whence=1`` - текущее положение, ``whence=2`` - конец файла.

-  ``f.close()`` - закрыть файл

.. warning:: По завершению работы с файлом всегда закрывайте его методом ``f.close()``

В случаа простой записи в файл можно воспользоваться функцией
``print(string, file = f)``

Создадим простой файл в рабочем каталоге и запишем в него несколько
строк:

.. code:: python

    f=open('example_file.txt', 'w')
    for i in range(5):
        print(f'строка {i}', file = f)
    f.close()

Содержимое полученного файла ``example_file.txt``:

.. code:: python

    строка 0
    строка 1
    строка 2
    строка 3
    строка 4



    
Задачи
================
