.. _theme3:

=========================================
Числа и списки
=========================================
Числа
=======
В python существует три стандартных класса чисел: цлочисленные (int), числа с плавающей запятой (float) и комплексные числа (complex). Подробное описание спецификаций численных типов Python можно найти в `документации <https://docs.python.org/3.8/library/stdtypes.html?#numeric-types-int-float-complex>`_. Особое внимание стоит уделить на заметки после таблицы поддерживаемых стандартных операций.

В некоторых задачах важно понимать как компьютер представляет числа. Наиболее частый тип используемых чисел для научного применения является `64-битный float <https://en.wikipedia.org/wiki/Double-precision_floating-point_format>`_.

.. image:: figs/t2_float64.svg

.. note:: Будьте внимательны суммируя числа разного порядка. 64-битный float имеет свои ограничения, связанные со способом его кодирования


Модуль math
-----------
Модуль math является встроенным модулем python для простейших математических операций. Описание модуля и его функций можно найти в `документации модуля math <https://docs.python.org/3/library/math.html>`_. На практике, удобнее и эффективнее использовать специализированный модуль numerical python (NumPy). При дальнейшем изучении курса мы будем пользоваться именно им.  

Для использования любого модуля или отдкльной функции, метода, или константы из него, необоходимо сначала его подключить к вашему скрипту. Рассмотрим несколько примеров подключения и использования модуля math (рассчитываем :math:`\sin (\frac{\pi}{4})`):

.. code-block:: python

    import math     
    y = math.sin(math.pi/4)   # любая другая функция модуля вызывается схожим способом
    #    ^    ^
    #    |    |
    #    | название функции в модуле
    #    |
    # название модуля

Внутри вашего скрипта любому сторонyему модулю можно дать свое локальное имя (часто используется в случае длинного названия модуля)

.. code-block:: python

    import math as m        # в дальнейшем к модулю math можно обращаться через m
    y = m.sin(m.pi/4)       # тоже что в предыдущем примере math.sin(math.pi/4)
    
Помимо этого, можно подгрузить отдельные объекты из модуля

.. code-block:: python

    from math import sin, pi
    y = sin(pi/4)

или загрузить модуль полностью

.. code-block:: python

    from math import *
    y = sin(pi/4)
 
.. note:: В качестве подключаемого модуля может быть ваш собственный файл (удобно использовать для разбиения фунционала в случае больших проектов или в качестве вашего личного модуля с уже написанными наиболее частоиспользуемыми алгоритмами. Подключение файла :file:`my_super_module.py` лежащего в той же папке, где и основной скрипт, происходит аналогично другим модулям ``import my_super_module``

Списки
=======

.. code-block:: python

    factorial(n):
	    if n is 0:
		    return 1
	    return n * factorial(n-1)
