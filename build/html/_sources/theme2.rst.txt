.. _theme2:

=========================================
Основы Синтаксиса Python
=========================================
Подробное описание спецификаций языка Python можно найти на `официальном сайте <https://www.python.org/doc/>`_. Помимо этого существует множество стороних (в том числе рускоязычных) ресурсов, где основы языка описаны более понятно для читателя с малым опытом программирования. 
 
Форматирование блоков кода
==========================
В python достаточно удобная система разметки кода. Один и тот же уровень вложения имее один и тот же отступ (табуляция или 4 пробела), и не требует никакого дополнительного форматирования (как ``{ ... }`` в **С/C++** и схожих по синтаксису языках или ``begin ... end`` в **Pascal** и т.д.). 

Ввод и вывод в консоль
======================
Работать с Python можно двумя основными способами: работа в консоли или написание исполняемых скриптов. В первом случае, достаточно просто последовательно вводить команды в консоль. Такой способ хорош в случае использования python в режиме калькулятора без графического интерфейса, или для выполнения нескольких простых последовательных комманд. В данном случае вопрос ввода и вывода данных решается сам собой.  В остальных случаях целесообразние использование :file:`.py` скриптов или :file:`.ipynb` файлов. 

Для вывода значения переменной **var** достаточно просто вызвать стандартную функцию:

.. code-block:: python

    print(var)

Для чтения данных с клавиатуры в переменную **var**:

.. code-block:: python

    var=input()               #ожидаем ввода с клавиатуры
    print('вы ввели:' +var)   #выводим результат



.. warning:: Если вы используете кириллицу в своем скрипте, он должен начинатся со строки::

    # -*- coding: utf-8 -*-


Ключевые слова и встроенные функции в Python
=============================================
Дабы избежать конфликта имен и познакомиться с некоторыми стандартными функциями pyhton полезно просмотреть стандартные ключевые слова и встроенные функции.

* Список `ключевых слов <https://pythonworld.ru/osnovy/klyuchevye-slova-modul-keyword.html>`_
* Список `встроенных функций <https://pythonworld.ru/osnovy/vstroennye-funkcii.html>`_



Основные операторы и типы
=========================
В данной теме мы рассмотрим минимальный набор операторов и типов. На следующих занятиях эти вопросы будут рассмотренны более подробно.

Обзор Типов данных
------------------
К основным типам данных можно отнести: логические (bool), числовые (int, float, complex), списки (list), кортежи (tuple), словари (dict), множества (set) и строки (str). Создание переменной любого выглядит следующим образом::

    имя_переменной = данные

Рассмотрим пример создание каждого типа переменных:

.. code-block:: python

    # Логические переменные    
    b = True              # возможные значения True и False
    
    # числовые переменные
    i = 42                # целые
    f1 = 4.2e1            # числа с плавающей точкой
    f2 = 0.42
    c = 4.2 - 0.1j        # комплексные числа

    # списки (массивы)
    l = [1, 2, 3, 4]
    l = [[3, 'строка', i],
         [1, -13.3+2j, 4],
         [f2, 1.47e-7, 2]]
    
    # кортежи (как списки, только их нельзя изменить после создания)
    t = (1, 2, -2.7)
    
    # словари 
    d = {'ключ':'значение', 'C':12.01, 'N':14.01}
    
    # множества (особенность: содержат не повторяющиеся элементы)
    s = {'o', 'l', 4}

    # строки
    s = 'просто строка'

В дополнении к этому, можно легко преобразовывать один тип в другой::

    >>> i = int(4.2e1)
    42

    >>> int(2**4)
    16

    >>> f = float('1.25e-3')
    0.00125

    >>> s = str(0.1 + 4)
    '4.1'
    >>> type(s)
    <class 'str'>

    >>> list('text')
    ['t', 'e', 'x', 't']


Операторы сравнения
----------------------------------------
К операторам сравнения можно отнести ``==``,  ``!=`` - проверка равенства и неравенства, соответственно;  ``<`` и ``>`` - проверка условий больше, меньше;  ``<=`` и ``>=`` - проверка условий больше или равно и меньше или равно. Каждый из операторов сравнения возвращает ``True`` или ``False``::

    >>> 3 > 5 
    False

    >>> 2 == 20.0e-1
    True

Условные операторы
---------------------
Условные операторы выполняют проверку тех или иных условий. В python имется 3 стандартных условных конструкций:

простое условие на выполение инструкций

.. code-block:: python

 
    if условие:
        инструкция
        инструкция
    
    # например, если a>0, то пишем что число положительное
    if a > 0:
        print('число положительное')

    # тоже самое 
    # присваиваем переменной condition логическое значение
    condition = a > 0 
    # в случае лишь одной инструкции после if, elif или else 
    # инструкцию можно записать сразу после условия  
    if condition: print('число положительное')  

условие с одной альтернативой

.. code-block:: python

    if условие:
        инструкция
        инструкция
    else:
        инструкция
        инструкция

    # например, если a >= b, то вычитаем из a единичку
    # иначе прибавляем к a единичку
    if a>=b:
        a -= 1    # или a = a - 1
    else:
        a += 1    # или a = a + 1 

условия с множественным выбором

.. code-block:: python

    if условие_1:
        инструкция
        инструкция
    elif условие_2:
        инструкция
        инструкция
    ...
    elif условие_n:
        инструкция
        инструкция
    else:
        инструкция
        инструкция

    # например, проверяем тип атома и присваиваем соответствующую массу
    m = 0
    if atom == 'C':     m = 12.
    elif atom == 'H':   m = 1.
    elif atom == 'O':   m = 16.
    else: 
        print('такого атома не знаю')


Цикл while
-----------------
Цикл ``while`` выполняется до тех пор, пока условие в нем верно

.. code-block:: python

    while условие:
        делаем какие-то действия 1
        делаем какие-то действия 2
        ...

    # выводим буквы пока i < 10
    i = 0
    while i < 10: 
        print('a' + str(i))
        i += 2

В этом случае буде выводиться в столбик ``a0  a2  a4  a6  a8``.

Цикл for и функция range
------------------------
Цикл ``for`` выполняет инструкции, последовательно итерируя набор. Пример итерации по некоторому списку::

    for element in some_list:
        набор инструкций 

    # пример
    for i in [1, 3, 7, 2.3, 9, 0]:
        print(i, i*2)

Цикл ``for`` может выводить значения любого итерируемого объекта, будь то список, кортеж, словарь (по ключам), множества, строки и т.д.::

    for s in 'яблоко':
        if s == 'я':
            print('Я')
        else:
            print(s)
    # выведет слово Яблоко с большой буквы

Для удобства итераций по последовательному ряду числе можно использовать функцию ``range(начало, конец, шаг)``.::

    for i in range(10): print(i)
    #выведет значения от 0 до 9

    for i in range(10, 20): print(i)
    #выведет значения от 10 до 19

    for i in range(-9, 20, 3): print(i)
    #выведет значения от -9 до 18 с шагом 3 (т.е. -9, -6, ..., 18)

    for i in range(20, 10, -2): print(i)
    #выведет значения от 20 до 12 с шагом 2 (т.е. 20, 18, ..., 12)

Функцией ``range()`` можно генерировать списки: ::
    
    >>> range(10)
    range(0, 10)

    >>> list(range(10))
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

Функция ``range()`` в качестве аргументов принемает только целочисленные значения.


Задачи
======



