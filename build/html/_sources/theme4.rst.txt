.. _theme4:

=========================================
Функции и строки
=========================================

`Лекция в .ipynb формате <../../source/lectures/theme4.ipynb>`_


Функции
=======

Функции
-------

Функция - объект принимающий аргументы, и возвращающий результат. В
простейщем случае функция определяются следующим образом:

.. code:: python

    def func(arg1, arg2, ..., argN):
        "Строка документации. Не обязательна, но приветствуется в больших проектах, или в модулях"
        инструкция1
        инструкция2
        ...
        инструкцияN
        return результат

Для использования функции просто вызываем ее из скрипта ниже объявления

.. code:: python

    переменная_для_результата = func(arg1, arg2, ..., argN)

Рассмотрим функцию, выводящую гипотенузу прямоугольного треугольника,
зная длины сторон катетов: :math:`c=\sqrt{a^2+b^2}`

.. code:: python

    def hypotenuse(a, b):
        "ищем гипотенузу"
        c = (a**2 + b**2)**0.5
        return c
    
    hyp = hypotenuse(3, 4)
    print(hyp)


.. parsed-literal::

    5.0


В качестве аргументов, и возвращаемого результата функции способны
принимать и отдавать любой набор объектов (включая другие функции или
ничего)

.. code:: python

    def create_list_of_None():
        l = [None for i in range(10)]
        return l
    
    el = create_list_of_None()
    print(el)


.. parsed-literal::

    [None, None, None, None, None, None, None, None, None, None]


.. code:: python

    def print_stuff(list_of_stuff):
        
        if type(list_of_stuff) is not list: # проверяем что нам передали список
            print('это не список')
            return                # еще можно pass
        
        if len(list_of_stuff) > 1: # проверяем что список достаточно длинный для нашего кода
            output_string = str(list_of_stuff[0]) # создаем строку из первого элемента
        
            for stuff in list_of_stuff[1:]:
                output_string += ', ' + str(stuff) # добавляем запятые и пробелы
            print(output_string)
        
        elif len(list_of_stuff) == 1: # в списке один элемент. запятые не нужны
            print(str(list_of_stuff[0]))
            
        else: print('получен пустой список')
    
    print_stuff(2)
    print_stuff([]) #пустой список
    print_stuff(['в списке один элемент. Выводим без запятых'])
    print_stuff(['d', 4, 3. + 2j, 6.62e-34])


.. parsed-literal::

    это не список
    получен пустой список
    в списке один элемент. Выводим без запятых
    d, 4, (3+2j), 6.62e-34


Аргументы функции
-----------------

Иногда функции требуется передать заранее не известное количество
аргументов, дополнительные аргументы (полезно при подборе параметров
моделей с scipy.optimize) и именованные аргументы.

Рассмотрим использование дополнительных аргументов (функция получает
кортеж, обозначается ``*``, например ``*args``)

.. code:: python

    def func(x, y, *ab_args):
        if len(ab_args) == 2: a, b = ab_args
        else: a = b = 1
        return a*x + b*y
    
    print(func(1, 2))
    print(func(1, 2, *(3, 4)))
    print(func(1, 2, 3, 4))


.. parsed-literal::

    3
    11
    11


Именованные аргументы представляются в виде словаря и обозначаются
``**``, например ``**kwards``

.. code:: python

    def func(x, y, **ab_kwards):
        a = ab_kwards['a']
        b = ab_kwards['b']
        return a*x + b*y
    
    print(func(1, 2, a = 3, b = 4))


.. parsed-literal::

    11


Lambda функции
--------------

Иногда бывает удобно использовать короткие ``lambda`` функции, которые
можно объявлять непосредственно перед использованием. Мы не будем их
использовать на регулярной основе. При необходимости, вы можете
самостоятельно ознакомиться с их функционалом и возможностями.

В общем виде, объявление и использование lambda функции происходит
следующим образом:

.. code:: python

    название_функции = lambda arg1, arg2, ..., argN : выражение

Рассмотрим приведенный ранее пример с вычислением гипотенузы

.. code:: python

    hypotenuse = lambda a, b: (a**2 + b**2)**0.5
    
    print(hypotenuse(3, 4))


.. parsed-literal::

    5.0


Строки
======

Строки - необходимый элемент для работы с текстом, подписями и файлами.
Python имеет довольно широкий базовый функционал для работы со строками.
Полное описание всего доступного функционала можно найти в документации
(учитывая ее формат и размер, лучше ищите отдельные примеры)

Строку можно задать с помощью кавычек или апострофов:

.. code:: python

    s = 'это строка'
    s = "это тоже строка"
    print(s)


.. parsed-literal::

    это тоже строка


Для записи очень длинных строк удобно использовать тройные кавычки
(апострофы):

.. code:: python

    s = '''Это очень
    тоже строка.
    Можно писать
    в несколько строк.
    
    удобно для форматирования
    input файлов для программ
    '''
    print(s)


.. parsed-literal::

    Это очень
    тоже строка.
    Можно писать
    в несколько строк.
    
    удобно для форматирования
    input файлов для программ
    


Литералы строк.
---------------

Литералы - служебные последовательности специального назначения (список
литералов строк). В работе с числовыми данными наиболее востребованны
символы

``\n`` - новая строка

``\t`` - табуляция

``\uhhhh`` - Unicode символ с номером hhhh (удобная таблица символов )

.. code:: python

    print('мы пытаемся написать текст\nв несколько строк')
    print('\tа это была табуляция')
    print('\u03a3 - сигма')
    print('\' - а это вывод кавычки, \nеще можно так \\n')


.. parsed-literal::

    мы пытаемся написать текст
    в несколько строк
    	а это была табуляция
    Σ - сигма
    ' - а это вывод кавычки, 
    еще можно так \n


Каждый вывод функции ``print()`` заканчивает строку символом ``\n``.
Если требуется, чтобы вывод не начинался с новой строки, можно либо
передавать в функцию ``print()`` уже отформатированну строку, либо
настроить ее окончание аргументом ``end='строка окончания'``:

.. code:: python

    s = ''
    for i in range(10):
        s += str(i) + ', '
    print(s)
    
    for i in range(10):
        print(i, end=', ')


.. parsed-literal::

    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 

В некоторых случаях требуется подавить экранирование символов. Для этого
перед началом строки добавляют ``r``:

.. code:: python

    print('C:\test\from_lectures\all\new_example.csv') # если N в new была бы большой - SyntaxError: (unicode error)
    
    print(r'C:\test\from_lectures\all\new_example.csv')


.. parsed-literal::

    C:	estrom_lecturesll
    ew_example.csv
    C:\test\from_lectures\all\new_example.csv


Методы и функции строк
----------------------

Многие базовые операции строк дублируют аналогичные для списков, и любы
других итерируемых объектов.

.. code:: python

    s = 'строка'
    print(s + ' раз') # сложение
    print(s*3)        # умножение
    print(len(s))     # размер строки
    print(s[::-1])     # срезы и обращение к элементам


.. parsed-literal::

    строка раз
    строкастрокастрока
    6
    акортс


Строки имеют дополнительные специальные методы форматирования. С рядом
из них рекомендуется ознакомиться тут, хотя бы чтобы не тратить время на
решение задач, которые решаются стандартными методами. Рассмотрим три
наиболее важных для нас метода:

``s.split(';')`` - разбиение строки по разделителю

``s.replace('CARBON','C')`` - замена шаблона

``s.find('energy',[start],[end])`` - поиск подстроки в строке с позиции
``start`` до позиции ``end``

.. code:: python

    s = '100.7440;22.974'
    print(s.split(';'))
    
    s = 'CARBON    1.0345   -3.9387    3.4362'
    new_s = s.replace('CARBON','C')
    print(new_s)
    
    s = 'jhalfjghofdinoivap;nkioskxnvlskvnsiudfvhmzxvloruigvaa;oirvw'
    i = s.find('kiosk')
    print(s[i-1:i+6],i)


.. parsed-literal::

    ['100.7440', '22.974']
    C    1.0345   -3.9387    3.4362
    nkioskx 20


Форматирование строк. Метод ``.format()``
-----------------------------------------

Метод ``.format()`` используется для подстановки значения в строку. Сам
метод имеет огромный функционал, который описан в соответствующем
разделе документации. Мы же рассмотрим лишь его общее использование и
отдельно форматирование вывода чисел. Общее использование метода
выглядит следующим образом:

.. code:: python

    s = 'подставляем {} вместо фигурных скобок'.format('строку')
    print(s)


.. parsed-literal::

    подставляем строку вместо фигурных скобок


Если подставляем несколько значений, то можно указывать какой именно
поррядковый номер аргумента подставлять в конкретную скобку:

.. code:: python

    print('{} {} {}'.format(10, 20, 30))
    print('{0} {1} {2}'.format(10, 20, 30))
    print('{2} {1} {2}'.format(10, 20, 30))


.. parsed-literal::

    10 20 30
    10 20 30
    30 20 30


В случае работы с приборными данными, бОльшую актуальность имеет
форматирование чисел. Рассмотрим структуру такого форматирования:

.. code:: python

    '...{:FasN.pT}...'.format(число)

``:`` начало блока спецификаций

``F`` - символ заполнения (**по умолчанию пробел**)

``a`` - выравнивание. ``<`` - по левому краю, ``>`` - по правому краю
(**по умолчанию**), ``=`` - знак слева, остальное справа, ``^`` - по
центру

``s`` - знак. ``+`` - всегда отображать знак, ``-`` - отображать только
минусы (**по умолчанию**), \`\` \`\` - отображать пробел для
положительных чисел

``N`` - общее количество знаков в выводе (если не протеворечит ``.d``,
иначе выводит согласно ``.d``)

``.p`` - количества знаков после запятой

``T`` - тип выводимого. ``d`` - для десятичных целочисленных (исключает
использование ``.p``), ``e`` - экспоненциальная запись (``E`` - тоже, но
выводит заглавную E), ``f`` - вывод числа с плавающей запятой, ``%`` -
вывод в процентах.

.. code:: python

    from math import pi
    print('4 знака после запятой: {:.4f}'.format(pi)) 
    print('\nширина колонки 10 символов, 2 знака после запятой\n{:10.2f}{:10.2f}'.format(pi,pi*10))
    print('\n+ выравнивание слева и по центру, заполнение 0 и *\n{:0<12.2f}{:*^12.2e}'.format(pi,pi*10))
    print('\nа это \u03C0 в %: {:+.3%}'.format(pi))


.. parsed-literal::

    4 знака после запятой: 3.1416
    
    ширина колонки 10 символов, 2 знака после запятой
          3.14     31.42
    
    + выравнивание слева и по центру, заполнение 0 и *
    3.1400000000**3.14e+01**

    а это π в %: +314.159%

Задачи
======

#. Написать функцию ``arithmetic()``, принимающую 3 аргумента: первые 2 - числа, третий - операция, которая должна быть произведена над ними. Если третий аргумент ``'+'``, сложить их; если ``'-'``, то вычесть; ``'*'`` — умножить; ``'/'`` — разделить (первое на второе). В остальных случаях вернуть строку ``"Unknown operation"``.

#. Напишите функцию нахождения факториала введенного числа. Выведите факториал чисел от 1 до 10.

#. Компания Lavin Interactive, разработчик пошаговой стратегии Losers-V, постоянно расширяет рынки сбыта и создаёт локализации своей игры даже на самые малоизвестные языки. В том числе, их заинтересовал язык племени австралийских аборигенов аниндилъяква. Но в языке аниндилъяква нет числительных. Как же, например, перевести на него фразу «у вас 7 чёрных драконов, а у вашего врага — 140»? Локализаторы решили перевести её так: «у вас несколько чёрных драконов, а у вашего врага — толпа». Они составили таблицу, в которой указали правила замены чисел, обозначающих количество монстров, на существительные и местоимения:
    
    =============== ================== =======================
     Количество      на русском языке   на языке аниндилъяква
    =============== ================== =======================
       от 1 до 4            Мало                few
    --------------- ------------------ -----------------------
       от 5 до 9        Несколько             several
    --------------- ------------------ -----------------------
      от 10 до 19         Стая                 pack
    --------------- ------------------ -----------------------
      от 20 до 49         Много                 lots
    --------------- ------------------ -----------------------
      от 50 до 99          Орда                horde
    --------------- ------------------ -----------------------
     от 100 до 249        Толпа                throng
    --------------- ------------------ -----------------------
     от 250 до 499        Свора                swarm
    --------------- ------------------ -----------------------
     от 500 до 999        Тысячи               zounds
    --------------- ------------------ -----------------------
       от 1000            Легион              legion
    =============== ================== =======================
    
    Помогите локализаторам автоматизировать процесс — напишите программу, которая по количеству монстров выдаст соответствующее этому количеству слово. На вход программа должны получать исходную строку (например ``'у вас 7 чёрных драконов, а у вашего врага — 140'``). На выходе она должна выводить переведенную строку, соответствующую данному количеству монстров на языке аниндилъяква.


